#ifndef CUSTOMERLIST_H
#define	CUSTOMERLIST_H
#include "LinkedList.h"
#include "Customer.h"
#include <sstream>

struct Node
{
		Customer Data;
		Node*    Next;
};
typedef Node* NodePointer;

class CustomerList : public Customer
{


	public:
	// Constructor
    CustomerList();
    // Destructor
    ~CustomerList();
    // Add Customer Data To The List
    void Add(Customer Data);
    // Remove Customer Data From The List
    void Delete(string Data);
    // Output The List
    void Output()const;
    // Check If The List Is Empty
    bool isEmpty();
    // Search For A Customer in The List
    NodePointer FindCustomer(string name);
    // Modify The Customer's Name Data
    void EditCustomerName(string name,  string change);
    // Modify The Customer's Address Data
    void EditCustomerAddress(string name, string change);
    // Modify The Customer's City Data
    void EditCustomerCity(string name, string change);
    // Modify The Customer's State Data
    void EditCustomerState(string name, string change);
    // Modify The Customer's Zip Data
    void EditCustomerZip(string name, string change);
    // Modify The Customer's Interest Data
    void EditCustomerInterest(string name, int change);
    // Modify The Customer's Desire Data
    void EditCustomerDesire(string name, int change);
    // Modify The Customer's Brochure Data
    void EditCustomerBrochure(string name, int change);
 
	private:
    int customers;
    NodePointer Head;
};

CustomerList::CustomerList(){
	Head      = NULL;
	customers = 0;
}
CustomerList::~CustomerList(){
	if(!isEmpty())
	{
		NodePointer Temp;
		while(!isEmpty())
		{
			Temp = Head;
			Head = Head->Next;
			delete Temp;
		}
		Temp = NULL;
	}
}

void CustomerList::Add(Customer Data){
    NodePointer NewNode;
    NodePointer TempPtr;
    NodePointer LastPtr;

    NewNode       = new Node;
    NewNode->Data = Data;
    LastPtr       = NULL;
    TempPtr 	  = Head;

    while(TempPtr != NULL && Data.GetCustomerName()
    									> TempPtr->Data.GetCustomerName())
    {
            LastPtr = TempPtr;
            TempPtr = TempPtr->Next;
    }

    NewNode->Next = TempPtr;

    if(LastPtr == NULL)
    {
            Head = NewNode;
    }
    else
    {
            LastPtr->Next = NewNode;
    }

    customers++;
}

void CustomerList::Delete(string Data){
    NodePointer TempPtr;
    NodePointer LastPtr;

    TempPtr = Head;

    while(TempPtr != NULL && TempPtr->Data.GetCustomerName() != Data)
    {
            LastPtr = TempPtr;
            TempPtr = TempPtr->Next;
    }

    if(TempPtr->Data.GetCustomerName() == Data)
    {
            LastPtr->Next = TempPtr->Next;
            delete TempPtr;
    }

    customers--;
}


void CustomerList::Output()const{
    ostringstream info;
    int           interestCount    = 0;
    int           length           = 0;
    string        customerInterest;
    string        temp;
    string        desire;
    string        address;
    NodePointer   tempPtr;

    tempPtr = Head;

    cout << left <<  setfill('-') << setw(138) << ' ' << setfill(' ') << endl;
	cout <<setw(2)  << '|' << setw(30) << "Customer Name" << setw(2)
		 << '|' << setw(50) << "Customer Address"<< setw(2) << '|' << setw(6)
		 << "State" <<  setw(2) << '|' << setw(6) << "Zip" << setw(2) << '|'
		 << setw(9) << "Interest" << setw(2) << '|' << setw(6) << "Value"
		 << setw(2) << '|' << setw(17) << "Brochure Received" << setw(2)
		 << '|' << endl;
	cout << setfill('-') << setw(138) << ' ' << setfill(' ') << endl;

    while(tempPtr != NULL)
    {
    	customerInterest = tempPtr->Data.GetInterest();
		length =  customerInterest.size();
		temp = "";
		interestCount = 0;
		while(interestCount < length)
		{

			if(customerInterest[interestCount] == ' ')
			{
				interestCount = customerInterest.size() + 1;
			}
			else
			{
				temp += customerInterest[interestCount];
			}
			interestCount++;
		}

		desire = "";
		if("key" != tempPtr->Data.GetDesire())
		{
			string thing = tempPtr->Data.GetDesire();

			for(int count = 0; count < 4; count++)
			{
				desire += thing[count];
			}
		}
		else
		{
			desire = tempPtr->Data.GetDesire();
		}

		address = tempPtr->Data.GetCustomerAddress() + ", "
				+ tempPtr->Data.GetCustomerCity();
		cout << setw(2)   << '|'     << setw(30)
			 << tempPtr->Data.GetCustomerName()
			 << setw(2) << '|'
			 << setw(50)
			 << address
			 << setw(2) << '|'       << setw(6)
			 << tempPtr->Data.GetCustomerState()   << setw(2) << '|'
			 << setw(6)
			 << tempPtr->Data.GetCustomerZip()     << setw(2) << '|'
			 << setw(9)
			 << temp    << setw(2)   << '|'     << setw(6)
			 << desire  << setw(2)   << '|'     << setw(17)
			 << tempPtr->Data.GetBrochure() << setw(2) << '|'
			 << endl;

		tempPtr = tempPtr->Next;
    }
    cout << setfill('-') << setw(138) << ' ' << setfill(' ') << endl;
}

bool CustomerList::isEmpty()
{
	return Head == NULL;
}

NodePointer CustomerList::FindCustomer(string name)
{
	NodePointer TempPtr;
	NodePointer LastPtr;
	bool found = false;

	TempPtr = Head;

	while(TempPtr != NULL && !found)
	{
		LastPtr = TempPtr;
		TempPtr = TempPtr->Next;
		if(TempPtr->Data.GetCustomerName() == name)
		{
			found = true;
		}
	}

	return TempPtr;
}

void CustomerList::EditCustomerName(string name, string change)
{
	NodePointer TempPtr;

	TempPtr = FindCustomer(name);
	TempPtr->Data.ChangeCustomerName(change);

}

void CustomerList::EditCustomerAddress(string name, string change)
{
	NodePointer TempPtr;

	TempPtr = FindCustomer(name);
	TempPtr->Data.ChangeCustomerAddress(change);

}

void CustomerList::EditCustomerCity(string name, string change)
{
	NodePointer TempPtr;

	TempPtr = FindCustomer(name);
	TempPtr->Data.ChangeCustomerCity(change);

}

void CustomerList::EditCustomerState(string name, string change)
{
	NodePointer TempPtr;

	TempPtr = FindCustomer(name);
	TempPtr->Data.ChangeCustomerState(change);
}

void CustomerList::EditCustomerZip(string name, string change)
{
	NodePointer TempPtr;

	TempPtr = FindCustomer(name);
	TempPtr->Data.ChangeCustomerZip(change);

}
void CustomerList::EditCustomerInterest(string name, int change)
{
	NodePointer TempPtr;

	TempPtr = FindCustomer(name);
	switch(change)
	{
	case 1  : TempPtr->Data.ChangeInterest("very interested");
		    break;
	case 2  : TempPtr->Data.ChangeInterest("somewhat interested");
		    break;
	case 3  : TempPtr->Data.ChangeInterest("not interested");
			break;
	default : cout << "Error \n";
	}
}

void CustomerList::EditCustomerDesire(string name, int change)
{
	NodePointer TempPtr;

	TempPtr = FindCustomer(name);
	switch(change)
	{
	case 1  : TempPtr->Data.ChangeDesire("Key");
		    break;
	case 2  : TempPtr->Data.ChangeDesire("Nice To Have");
			break;
	default : cout << "Error \n";
	}
}

void CustomerList::EditCustomerBrochure(string name, int change)
{
	NodePointer TempPtr;

	TempPtr = FindCustomer(name);

	if(TempPtr->Data.GetBrochure() != 'Y' && change == 1)
	{
		TempPtr->Data.ChangeBrochure('Y');
	}
	else if(TempPtr->Data.GetBrochure() != 'N' && change == 2)
	{
		TempPtr->Data.ChangeBrochure('N');
	}
}
#endif	/* CUSTOMERLIST_H */

